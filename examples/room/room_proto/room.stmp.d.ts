// Code generated by protoc-gen-stmp. DO NOT EDIT.
// source: examples/room/room_proto/room.proto
import pb from "./room.pb";
import { CallOptions, Connection, ConnFilter, Context, Server } from "stmp";

export default stmp;

declare namespace stmp {
  namespace stmp.examples.room {


    class UserServiceServer {
      static register(srv: Server, inst: UserServiceServer): void
      static unregister(srv: Server, inst: UserServiceServer): void
      ListUser(ctx: Context, input: pb.stmp.examples.room.ListUserInput, output: pb.stmp.examples.room.ListUserOutput): void | Promise<void>
    }

    class UserServiceBroadcaster {
      static ListUser(input: pb.stmp.examples.room.IListUserInput, conn: Connection, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.ListUserOutput>
      static ListUserForSet(input: pb.stmp.examples.room.IListUserInput, conns: Set<Connection>): void
      static broadcastListUser(input: pb.stmp.examples.room.IListUserInput, srv: Server, filter?: ConnFilter): void
      static ListUserMethod(): string
      static ListUserAction(): string
    }

    class UserServiceClient {
      private conn: Connection;
      constructor(conn: Connection)
      ListUser(data: pb.stmp.examples.room.IListUserInput, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.ListUserOutput>
    }

    class UserEventsServer {
      static register(srv: Server, inst: UserEventsServer): void
      static unregister(srv: Server, inst: UserEventsServer): void
      StatusUpdated(ctx: Context, input: pb.stmp.examples.room.UserModel, output: pb.google.protobuf.Empty): void | Promise<void>
    }

    class UserEventsBroadcaster {
      static StatusUpdated(input: pb.stmp.examples.room.IUserModel, conn: Connection, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
      static StatusUpdatedForSet(input: pb.stmp.examples.room.IUserModel, conns: Set<Connection>): void
      static broadcastStatusUpdated(input: pb.stmp.examples.room.IUserModel, srv: Server, filter?: ConnFilter): void
      static StatusUpdatedMethod(): string
      static StatusUpdatedAction(): string
    }

    class UserEventsClient {
      private conn: Connection;
      constructor(conn: Connection)
      StatusUpdated(data: pb.stmp.examples.room.IUserModel, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
    }

    class RoomServiceServer {
      static register(srv: Server, inst: RoomServiceServer): void
      static unregister(srv: Server, inst: RoomServiceServer): void
      CreateRoom(ctx: Context, input: pb.stmp.examples.room.CreateRoomInput, output: pb.stmp.examples.room.RoomModel): void | Promise<void>
      ListRoom(ctx: Context, input: pb.stmp.examples.room.ListRoomInput, output: pb.stmp.examples.room.ListRoomOutput): void | Promise<void>
      JoinRoom(ctx: Context, input: pb.stmp.examples.room.JoinRoomInput, output: pb.stmp.examples.room.RoomModel): void | Promise<void>
      ExitRoom(ctx: Context, input: pb.stmp.examples.room.ExitRoomInput, output: pb.google.protobuf.Empty): void | Promise<void>
      SendMessage(ctx: Context, input: pb.stmp.examples.room.SendMessageInput, output: pb.google.protobuf.Empty): void | Promise<void>
    }

    class RoomServiceBroadcaster {
      static CreateRoom(input: pb.stmp.examples.room.ICreateRoomInput, conn: Connection, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.RoomModel>
      static CreateRoomForSet(input: pb.stmp.examples.room.ICreateRoomInput, conns: Set<Connection>): void
      static broadcastCreateRoom(input: pb.stmp.examples.room.ICreateRoomInput, srv: Server, filter?: ConnFilter): void
      static CreateRoomMethod(): string
      static CreateRoomAction(): string
      static ListRoom(input: pb.stmp.examples.room.IListRoomInput, conn: Connection, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.ListRoomOutput>
      static ListRoomForSet(input: pb.stmp.examples.room.IListRoomInput, conns: Set<Connection>): void
      static broadcastListRoom(input: pb.stmp.examples.room.IListRoomInput, srv: Server, filter?: ConnFilter): void
      static ListRoomMethod(): string
      static ListRoomAction(): string
      static JoinRoom(input: pb.stmp.examples.room.IJoinRoomInput, conn: Connection, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.RoomModel>
      static JoinRoomForSet(input: pb.stmp.examples.room.IJoinRoomInput, conns: Set<Connection>): void
      static broadcastJoinRoom(input: pb.stmp.examples.room.IJoinRoomInput, srv: Server, filter?: ConnFilter): void
      static JoinRoomMethod(): string
      static JoinRoomAction(): string
      static ExitRoom(input: pb.stmp.examples.room.IExitRoomInput, conn: Connection, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
      static ExitRoomForSet(input: pb.stmp.examples.room.IExitRoomInput, conns: Set<Connection>): void
      static broadcastExitRoom(input: pb.stmp.examples.room.IExitRoomInput, srv: Server, filter?: ConnFilter): void
      static ExitRoomMethod(): string
      static ExitRoomAction(): string
      static SendMessage(input: pb.stmp.examples.room.ISendMessageInput, conn: Connection, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
      static SendMessageForSet(input: pb.stmp.examples.room.ISendMessageInput, conns: Set<Connection>): void
      static broadcastSendMessage(input: pb.stmp.examples.room.ISendMessageInput, srv: Server, filter?: ConnFilter): void
      static SendMessageMethod(): string
      static SendMessageAction(): string
    }

    class RoomServiceClient {
      private conn: Connection;
      constructor(conn: Connection)
      CreateRoom(data: pb.stmp.examples.room.ICreateRoomInput, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.RoomModel>
      ListRoom(data: pb.stmp.examples.room.IListRoomInput, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.ListRoomOutput>
      JoinRoom(data: pb.stmp.examples.room.IJoinRoomInput, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.RoomModel>
      ExitRoom(data: pb.stmp.examples.room.IExitRoomInput, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
      SendMessage(data: pb.stmp.examples.room.ISendMessageInput, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
    }

    class RoomEventsServer {
      static register(srv: Server, inst: RoomEventsServer): void
      static unregister(srv: Server, inst: RoomEventsServer): void
      UserEnter(ctx: Context, input: pb.stmp.examples.room.UserEnterEvent, output: pb.google.protobuf.Empty): void | Promise<void>
      UserExit(ctx: Context, input: pb.stmp.examples.room.UserExitEvent, output: pb.google.protobuf.Empty): void | Promise<void>
      NewMessage(ctx: Context, input: pb.stmp.examples.room.ChatMessageModel, output: pb.google.protobuf.Empty): void | Promise<void>
    }

    class RoomEventsBroadcaster {
      static UserEnter(input: pb.stmp.examples.room.IUserEnterEvent, conn: Connection, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
      static UserEnterForSet(input: pb.stmp.examples.room.IUserEnterEvent, conns: Set<Connection>): void
      static broadcastUserEnter(input: pb.stmp.examples.room.IUserEnterEvent, srv: Server, filter?: ConnFilter): void
      static UserEnterMethod(): string
      static UserEnterAction(): string
      static UserExit(input: pb.stmp.examples.room.IUserExitEvent, conn: Connection, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
      static UserExitForSet(input: pb.stmp.examples.room.IUserExitEvent, conns: Set<Connection>): void
      static broadcastUserExit(input: pb.stmp.examples.room.IUserExitEvent, srv: Server, filter?: ConnFilter): void
      static UserExitMethod(): string
      static UserExitAction(): string
      static NewMessage(input: pb.stmp.examples.room.IChatMessageModel, conn: Connection, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
      static NewMessageForSet(input: pb.stmp.examples.room.IChatMessageModel, conns: Set<Connection>): void
      static broadcastNewMessage(input: pb.stmp.examples.room.IChatMessageModel, srv: Server, filter?: ConnFilter): void
      static NewMessageMethod(): string
      static NewMessageAction(): string
    }

    class RoomEventsClient {
      private conn: Connection;
      constructor(conn: Connection)
      UserEnter(data: pb.stmp.examples.room.IUserEnterEvent, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
      UserExit(data: pb.stmp.examples.room.IUserExitEvent, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
      NewMessage(data: pb.stmp.examples.room.IChatMessageModel, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
    }
  }
}
