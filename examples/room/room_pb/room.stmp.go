// Code generated by protoc-gen-stmp. DO NOT EDIT.
// source: examples/room/room_pb/room.proto
package roompb

import (
	"context"
	"github.com/acrazing/stmp-go/stmp"
	empty "github.com/golang/protobuf/ptypes/empty"
)


func init() {
	stmp.RegisterMethodAction("stmp.examples.room.UserService.ListUser", 0x1001, func() interface{} { return &ListInput{} }, func() interface{} { return &ListUserOutput{} })
	stmp.RegisterMethodAction("stmp.examples.room.UserService.Login", 0x1002, func() interface{} { return &LoginInput{} }, func() interface{} { return &UserModel{} })
}

type STMPUserServiceServer interface {
	ListUser(ctx context.Context, in *ListInput) (out *ListUserOutput, err error)
	Login(ctx context.Context, in *LoginInput) (out *UserModel, err error)
}

func STMPRegisterUserServiceServer(srv *stmp.Server, s STMPUserServiceServer) {
	srv.Register(s, "stmp.examples.room.UserService.ListUser", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPUserServiceServer).ListUser(ctx, in.(*ListInput)) })
	srv.Register(s, "stmp.examples.room.UserService.Login", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPUserServiceServer).Login(ctx, in.(*LoginInput)) })
}

func STMPUnregisterUserServiceServer(srv *stmp.Server, s STMPUserServiceServer) {
	srv.Unregister(s, "stmp.examples.room.UserService.ListUser")
	srv.Unregister(s, "stmp.examples.room.UserService.Login")
}

type STMPUserServiceClient interface {
	ListUser(ctx context.Context, in *ListInput, opts ...*stmp.CallOptions) (*ListUserOutput, error)
	Login(ctx context.Context, in *LoginInput, opts ...*stmp.CallOptions) (*UserModel, error)
}

type stmpUserServiceClient struct {
	c *stmp.Client
}

func (s *stmpUserServiceClient) ListUser(ctx context.Context, in *ListInput, opts ...*stmp.CallOptions) (*ListUserOutput, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.room.UserService.ListUser", in, stmp.PickCallOptions(opts...))
	if out == nil { return (*ListUserOutput)(nil), err } else { return out.(*ListUserOutput), err }
}

func (s *stmpUserServiceClient) Login(ctx context.Context, in *LoginInput, opts ...*stmp.CallOptions) (*UserModel, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.room.UserService.Login", in, stmp.PickCallOptions(opts...))
	if out == nil { return (*UserModel)(nil), err } else { return out.(*UserModel), err }
}

func STMPNewUserServiceClient(c *stmp.Client) STMPUserServiceClient {
	return &stmpUserServiceClient{c: c}
}


func init() {
	stmp.RegisterMethodAction("stmp.examples.room.UserEvents.StatusUpdated", 0x1101, func() interface{} { return &UserModel{} }, func() interface{} { return &empty.Empty{} })
}


type STMPUserEventsListener interface {
	HandleStatusUpdated(ctx context.Context, in *UserModel)
}

func STMPRegisterUserEventsListener(cc *stmp.Client, s STMPUserEventsListener) {
	cc.Register(s, "stmp.examples.room.UserEvents.StatusUpdated", func(ctx context.Context, in interface{}, inst interface{}) (interface{}, error) {
		inst.(STMPUserEventsListener).HandleStatusUpdated(ctx, in.(*UserModel))
		return nil, nil
	})
}

func STMPUnregisterUserEventsListener(cc *stmp.Client, s STMPUserEventsListener) {
	cc.Unregister(s, "stmp.examples.room.UserEvents.StatusUpdated")
}

type STMPUserEventsBroadcaster struct{}

func (s STMPUserEventsBroadcaster) StatusUpdated(ctx context.Context, in *UserModel, conn *stmp.Conn, opts ...*stmp.CallOptions) error {
	_, err := conn.Invoke(ctx, "stmp.examples.room.UserEvents.StatusUpdated", in, stmp.PickCallOptions(opts...).Notify())
	return err
}

func (s STMPUserEventsBroadcaster) StatusUpdatedToList(ctx context.Context, in *UserModel, conns ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for _, conn := range conns {
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.room.UserEvents.StatusUpdated", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPUserEventsBroadcaster) StatusUpdatedToSet(ctx context.Context, in *UserModel, conns stmp.ConnSet, exclude ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for conn := range conns {
		for _, e := range exclude {
			if e == conn {
				conn = nil
				break
			}
		}
		if conn == nil {
			continue
		}
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.room.UserEvents.StatusUpdated", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPUserEventsBroadcaster) StatusUpdatedToAll(ctx context.Context, in *UserModel, srv *stmp.Server, filter ...stmp.ConnFilter) error {
	return srv.Broadcast(ctx, "stmp.examples.room.UserEvents.StatusUpdated", in, filter...)
}
func init() {
	stmp.RegisterMethodAction("stmp.examples.room.RoomService.CreateRoom", 0x1201, func() interface{} { return &CreateRoomInput{} }, func() interface{} { return &RoomModel{} })
	stmp.RegisterMethodAction("stmp.examples.room.RoomService.ListRoom", 0x1202, func() interface{} { return &ListInput{} }, func() interface{} { return &ListRoomOutput{} })
	stmp.RegisterMethodAction("stmp.examples.room.RoomService.JoinRoom", 0x1203, func() interface{} { return &JoinRoomInput{} }, func() interface{} { return &RoomModel{} })
	stmp.RegisterMethodAction("stmp.examples.room.RoomService.ExitRoom", 0x1204, func() interface{} { return &ExitRoomInput{} }, func() interface{} { return &empty.Empty{} })
	stmp.RegisterMethodAction("stmp.examples.room.RoomService.SendMessage", 0x1205, func() interface{} { return &SendMessageInput{} }, func() interface{} { return &empty.Empty{} })
}

type STMPRoomServiceServer interface {
	CreateRoom(ctx context.Context, in *CreateRoomInput) (out *RoomModel, err error)
	ListRoom(ctx context.Context, in *ListInput) (out *ListRoomOutput, err error)
	JoinRoom(ctx context.Context, in *JoinRoomInput) (out *RoomModel, err error)
	ExitRoom(ctx context.Context, in *ExitRoomInput) (out *empty.Empty, err error)
	SendMessage(ctx context.Context, in *SendMessageInput) (out *empty.Empty, err error)
}

func STMPRegisterRoomServiceServer(srv *stmp.Server, s STMPRoomServiceServer) {
	srv.Register(s, "stmp.examples.room.RoomService.CreateRoom", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomServiceServer).CreateRoom(ctx, in.(*CreateRoomInput)) })
	srv.Register(s, "stmp.examples.room.RoomService.ListRoom", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomServiceServer).ListRoom(ctx, in.(*ListInput)) })
	srv.Register(s, "stmp.examples.room.RoomService.JoinRoom", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomServiceServer).JoinRoom(ctx, in.(*JoinRoomInput)) })
	srv.Register(s, "stmp.examples.room.RoomService.ExitRoom", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomServiceServer).ExitRoom(ctx, in.(*ExitRoomInput)) })
	srv.Register(s, "stmp.examples.room.RoomService.SendMessage", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomServiceServer).SendMessage(ctx, in.(*SendMessageInput)) })
}

func STMPUnregisterRoomServiceServer(srv *stmp.Server, s STMPRoomServiceServer) {
	srv.Unregister(s, "stmp.examples.room.RoomService.CreateRoom")
	srv.Unregister(s, "stmp.examples.room.RoomService.ListRoom")
	srv.Unregister(s, "stmp.examples.room.RoomService.JoinRoom")
	srv.Unregister(s, "stmp.examples.room.RoomService.ExitRoom")
	srv.Unregister(s, "stmp.examples.room.RoomService.SendMessage")
}

type STMPRoomServiceClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomInput, opts ...*stmp.CallOptions) (*RoomModel, error)
	ListRoom(ctx context.Context, in *ListInput, opts ...*stmp.CallOptions) (*ListRoomOutput, error)
	JoinRoom(ctx context.Context, in *JoinRoomInput, opts ...*stmp.CallOptions) (*RoomModel, error)
	ExitRoom(ctx context.Context, in *ExitRoomInput, opts ...*stmp.CallOptions) (*empty.Empty, error)
	SendMessage(ctx context.Context, in *SendMessageInput, opts ...*stmp.CallOptions) (*empty.Empty, error)
}

type stmpRoomServiceClient struct {
	c *stmp.Client
}

func (s *stmpRoomServiceClient) CreateRoom(ctx context.Context, in *CreateRoomInput, opts ...*stmp.CallOptions) (*RoomModel, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.room.RoomService.CreateRoom", in, stmp.PickCallOptions(opts...))
	if out == nil { return (*RoomModel)(nil), err } else { return out.(*RoomModel), err }
}

func (s *stmpRoomServiceClient) ListRoom(ctx context.Context, in *ListInput, opts ...*stmp.CallOptions) (*ListRoomOutput, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.room.RoomService.ListRoom", in, stmp.PickCallOptions(opts...))
	if out == nil { return (*ListRoomOutput)(nil), err } else { return out.(*ListRoomOutput), err }
}

func (s *stmpRoomServiceClient) JoinRoom(ctx context.Context, in *JoinRoomInput, opts ...*stmp.CallOptions) (*RoomModel, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.room.RoomService.JoinRoom", in, stmp.PickCallOptions(opts...))
	if out == nil { return (*RoomModel)(nil), err } else { return out.(*RoomModel), err }
}

func (s *stmpRoomServiceClient) ExitRoom(ctx context.Context, in *ExitRoomInput, opts ...*stmp.CallOptions) (*empty.Empty, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.room.RoomService.ExitRoom", in, stmp.PickCallOptions(opts...))
	if out == nil { return (*empty.Empty)(nil), err } else { return out.(*empty.Empty), err }
}

func (s *stmpRoomServiceClient) SendMessage(ctx context.Context, in *SendMessageInput, opts ...*stmp.CallOptions) (*empty.Empty, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.room.RoomService.SendMessage", in, stmp.PickCallOptions(opts...))
	if out == nil { return (*empty.Empty)(nil), err } else { return out.(*empty.Empty), err }
}

func STMPNewRoomServiceClient(c *stmp.Client) STMPRoomServiceClient {
	return &stmpRoomServiceClient{c: c}
}


func init() {
	stmp.RegisterMethodAction("stmp.examples.room.RoomEvents.UserEnter", 0x1301, func() interface{} { return &UserEnterEvent{} }, func() interface{} { return &empty.Empty{} })
	stmp.RegisterMethodAction("stmp.examples.room.RoomEvents.UserExit", 0x1302, func() interface{} { return &UserExitEvent{} }, func() interface{} { return &empty.Empty{} })
	stmp.RegisterMethodAction("stmp.examples.room.RoomEvents.NewMessage", 0x1303, func() interface{} { return &ChatMessageModel{} }, func() interface{} { return &empty.Empty{} })
}


type STMPRoomEventsListener interface {
	HandleUserEnter(ctx context.Context, in *UserEnterEvent)
	HandleUserExit(ctx context.Context, in *UserExitEvent)
	HandleNewMessage(ctx context.Context, in *ChatMessageModel)
}

func STMPRegisterRoomEventsListener(cc *stmp.Client, s STMPRoomEventsListener) {
	cc.Register(s, "stmp.examples.room.RoomEvents.UserEnter", func(ctx context.Context, in interface{}, inst interface{}) (interface{}, error) {
		inst.(STMPRoomEventsListener).HandleUserEnter(ctx, in.(*UserEnterEvent))
		return nil, nil
	})
	cc.Register(s, "stmp.examples.room.RoomEvents.UserExit", func(ctx context.Context, in interface{}, inst interface{}) (interface{}, error) {
		inst.(STMPRoomEventsListener).HandleUserExit(ctx, in.(*UserExitEvent))
		return nil, nil
	})
	cc.Register(s, "stmp.examples.room.RoomEvents.NewMessage", func(ctx context.Context, in interface{}, inst interface{}) (interface{}, error) {
		inst.(STMPRoomEventsListener).HandleNewMessage(ctx, in.(*ChatMessageModel))
		return nil, nil
	})
}

func STMPUnregisterRoomEventsListener(cc *stmp.Client, s STMPRoomEventsListener) {
	cc.Unregister(s, "stmp.examples.room.RoomEvents.UserEnter")
	cc.Unregister(s, "stmp.examples.room.RoomEvents.UserExit")
	cc.Unregister(s, "stmp.examples.room.RoomEvents.NewMessage")
}

type STMPRoomEventsBroadcaster struct{}

func (s STMPRoomEventsBroadcaster) UserEnter(ctx context.Context, in *UserEnterEvent, conn *stmp.Conn, opts ...*stmp.CallOptions) error {
	_, err := conn.Invoke(ctx, "stmp.examples.room.RoomEvents.UserEnter", in, stmp.PickCallOptions(opts...).Notify())
	return err
}

func (s STMPRoomEventsBroadcaster) UserEnterToList(ctx context.Context, in *UserEnterEvent, conns ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for _, conn := range conns {
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.room.RoomEvents.UserEnter", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) UserEnterToSet(ctx context.Context, in *UserEnterEvent, conns stmp.ConnSet, exclude ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for conn := range conns {
		for _, e := range exclude {
			if e == conn {
				conn = nil
				break
			}
		}
		if conn == nil {
			continue
		}
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.room.RoomEvents.UserEnter", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) UserEnterToAll(ctx context.Context, in *UserEnterEvent, srv *stmp.Server, filter ...stmp.ConnFilter) error {
	return srv.Broadcast(ctx, "stmp.examples.room.RoomEvents.UserEnter", in, filter...)
}
func (s STMPRoomEventsBroadcaster) UserExit(ctx context.Context, in *UserExitEvent, conn *stmp.Conn, opts ...*stmp.CallOptions) error {
	_, err := conn.Invoke(ctx, "stmp.examples.room.RoomEvents.UserExit", in, stmp.PickCallOptions(opts...).Notify())
	return err
}

func (s STMPRoomEventsBroadcaster) UserExitToList(ctx context.Context, in *UserExitEvent, conns ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for _, conn := range conns {
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.room.RoomEvents.UserExit", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) UserExitToSet(ctx context.Context, in *UserExitEvent, conns stmp.ConnSet, exclude ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for conn := range conns {
		for _, e := range exclude {
			if e == conn {
				conn = nil
				break
			}
		}
		if conn == nil {
			continue
		}
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.room.RoomEvents.UserExit", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) UserExitToAll(ctx context.Context, in *UserExitEvent, srv *stmp.Server, filter ...stmp.ConnFilter) error {
	return srv.Broadcast(ctx, "stmp.examples.room.RoomEvents.UserExit", in, filter...)
}
func (s STMPRoomEventsBroadcaster) NewMessage(ctx context.Context, in *ChatMessageModel, conn *stmp.Conn, opts ...*stmp.CallOptions) error {
	_, err := conn.Invoke(ctx, "stmp.examples.room.RoomEvents.NewMessage", in, stmp.PickCallOptions(opts...).Notify())
	return err
}

func (s STMPRoomEventsBroadcaster) NewMessageToList(ctx context.Context, in *ChatMessageModel, conns ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for _, conn := range conns {
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.room.RoomEvents.NewMessage", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) NewMessageToSet(ctx context.Context, in *ChatMessageModel, conns stmp.ConnSet, exclude ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for conn := range conns {
		for _, e := range exclude {
			if e == conn {
				conn = nil
				break
			}
		}
		if conn == nil {
			continue
		}
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.room.RoomEvents.NewMessage", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) NewMessageToAll(ctx context.Context, in *ChatMessageModel, srv *stmp.Server, filter ...stmp.ConnFilter) error {
	return srv.Broadcast(ctx, "stmp.examples.room.RoomEvents.NewMessage", in, filter...)
}
