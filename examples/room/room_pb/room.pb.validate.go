// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: examples/room/room_pb/room.proto

package roompb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _room_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UserModel with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserModel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Room

	// no validation rules for Status

	return nil
}

// UserModelValidationError is the validation error returned by
// UserModel.Validate if the designated constraints aren't met.
type UserModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserModelValidationError) ErrorName() string { return "UserModelValidationError" }

// Error satisfies the builtin error interface
func (e UserModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserModelValidationError{}

// Validate checks the field values on LoginInput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// LoginInputValidationError is the validation error returned by
// LoginInput.Validate if the designated constraints aren't met.
type LoginInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginInputValidationError) ErrorName() string { return "LoginInputValidationError" }

// Error satisfies the builtin error interface
func (e LoginInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginInputValidationError{}

// Validate checks the field values on ListInput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListInputValidationError is the validation error returned by
// ListInput.Validate if the designated constraints aren't met.
type ListInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInputValidationError) ErrorName() string { return "ListInputValidationError" }

// Error satisfies the builtin error interface
func (e ListInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInputValidationError{}

// Validate checks the field values on ListUserOutput with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUserOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListUserOutputValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListUserOutputValidationError is the validation error returned by
// ListUserOutput.Validate if the designated constraints aren't met.
type ListUserOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserOutputValidationError) ErrorName() string { return "ListUserOutputValidationError" }

// Error satisfies the builtin error interface
func (e ListUserOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserOutputValidationError{}

// Validate checks the field values on ChatMessageModel with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ChatMessageModel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Room

	// no validation rules for User

	// no validation rules for Content

	// no validation rules for CreatedAt

	return nil
}

// ChatMessageModelValidationError is the validation error returned by
// ChatMessageModel.Validate if the designated constraints aren't met.
type ChatMessageModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageModelValidationError) ErrorName() string { return "ChatMessageModelValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessageModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageModelValidationError{}

// Validate checks the field values on RoomModel with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RoomModel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	for key, val := range m.GetUsers() {
		_ = val

		// no validation rules for Users[key]

		{
			tmp := val

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return RoomModelValidationError{
						field:  fmt.Sprintf("Users[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return RoomModelValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// RoomModelValidationError is the validation error returned by
// RoomModel.Validate if the designated constraints aren't met.
type RoomModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomModelValidationError) ErrorName() string { return "RoomModelValidationError" }

// Error satisfies the builtin error interface
func (e RoomModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomModelValidationError{}

// Validate checks the field values on CreateRoomInput with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateRoomInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// CreateRoomInputValidationError is the validation error returned by
// CreateRoomInput.Validate if the designated constraints aren't met.
type CreateRoomInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomInputValidationError) ErrorName() string { return "CreateRoomInputValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoomInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomInputValidationError{}

// Validate checks the field values on ListRoomOutput with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListRoomOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListRoomOutputValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListRoomOutputValidationError is the validation error returned by
// ListRoomOutput.Validate if the designated constraints aren't met.
type ListRoomOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoomOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoomOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoomOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoomOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoomOutputValidationError) ErrorName() string { return "ListRoomOutputValidationError" }

// Error satisfies the builtin error interface
func (e ListRoomOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoomOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoomOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoomOutputValidationError{}

// Validate checks the field values on JoinRoomInput with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JoinRoomInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Room

	return nil
}

// JoinRoomInputValidationError is the validation error returned by
// JoinRoomInput.Validate if the designated constraints aren't met.
type JoinRoomInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRoomInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRoomInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRoomInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRoomInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRoomInputValidationError) ErrorName() string { return "JoinRoomInputValidationError" }

// Error satisfies the builtin error interface
func (e JoinRoomInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRoomInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRoomInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRoomInputValidationError{}

// Validate checks the field values on ExitRoomInput with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ExitRoomInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Room

	return nil
}

// ExitRoomInputValidationError is the validation error returned by
// ExitRoomInput.Validate if the designated constraints aren't met.
type ExitRoomInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExitRoomInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExitRoomInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExitRoomInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExitRoomInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExitRoomInputValidationError) ErrorName() string { return "ExitRoomInputValidationError" }

// Error satisfies the builtin error interface
func (e ExitRoomInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExitRoomInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExitRoomInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExitRoomInputValidationError{}

// Validate checks the field values on SendMessageInput with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SendMessageInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Room

	// no validation rules for Content

	return nil
}

// SendMessageInputValidationError is the validation error returned by
// SendMessageInput.Validate if the designated constraints aren't met.
type SendMessageInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageInputValidationError) ErrorName() string { return "SendMessageInputValidationError" }

// Error satisfies the builtin error interface
func (e SendMessageInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageInputValidationError{}

// Validate checks the field values on UserEnterEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserEnterEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Room

	{
		tmp := m.GetUser()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return UserEnterEventValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// UserEnterEventValidationError is the validation error returned by
// UserEnterEvent.Validate if the designated constraints aren't met.
type UserEnterEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEnterEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEnterEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEnterEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEnterEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEnterEventValidationError) ErrorName() string { return "UserEnterEventValidationError" }

// Error satisfies the builtin error interface
func (e UserEnterEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEnterEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEnterEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEnterEventValidationError{}

// Validate checks the field values on UserExitEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserExitEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Room

	return nil
}

// UserExitEventValidationError is the validation error returned by
// UserExitEvent.Validate if the designated constraints aren't met.
type UserExitEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserExitEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserExitEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserExitEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserExitEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserExitEventValidationError) ErrorName() string { return "UserExitEventValidationError" }

// Error satisfies the builtin error interface
func (e UserExitEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserExitEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserExitEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserExitEventValidationError{}
