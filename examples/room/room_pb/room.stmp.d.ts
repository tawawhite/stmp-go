// Code generated by protoc-gen-stmp. DO NOT EDIT.
// source: examples/room/room_pb/room.proto
import pb from "./room.pb";
import { CallOptions, Connection, ConnFilter, Context, Server, Client } from "stmp";

export default stmp;

declare namespace stmp {
  
  namespace stmp.examples.room {
    
    
    class UserServiceServer {
      static register(srv: Server, inst: UserServiceServer): void
      static unregister(srv: Server, inst: UserServiceServer): void
      
      ListUser(ctx: Context, input: pb.stmp.examples.room.ListInput, output: pb.stmp.examples.room.ListUserOutput): void | Promise<void>
      
      Login(ctx: Context, input: pb.stmp.examples.room.LoginInput, output: pb.stmp.examples.room.UserModel): void | Promise<void>
      
    }

    class UserServiceClient {
      private client: Client;
      constructor(client: Client)
      
      ListUser(data: pb.stmp.examples.room.IListInput, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.ListUserOutput>
      
      Login(data: pb.stmp.examples.room.ILoginInput, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.UserModel>
      
    }
    
    
    
    
    
    class UserEventsListener {
      static register(c: Client, inst: UserEventsListener): void
      static unregister(c: Client, inst: UserEventsListener): void
      
      HandleStatusUpdated(ctx: Context, input: pb.stmp.examples.room.UserModel, output: pb.google.protobuf.Empty): void
      
    }

    class UserEventsBroadcaster {
      
      static StatusUpdated(input: pb.stmp.examples.room.IUserModel, conn: Connection): void
      static StatusUpdatedToSet(input: pb.stmp.examples.room.IUserModel, conns: Set<Connection>, excludes?: Connection[]): void
      static StatusUpdatedToAll(input: pb.stmp.examples.room.IUserModel, srv: Server, filter?: ConnFilter): void
      
      constructor()
    }
    
    
    
    class RoomServiceServer {
      static register(srv: Server, inst: RoomServiceServer): void
      static unregister(srv: Server, inst: RoomServiceServer): void
      
      CreateRoom(ctx: Context, input: pb.stmp.examples.room.CreateRoomInput, output: pb.stmp.examples.room.RoomModel): void | Promise<void>
      
      ListRoom(ctx: Context, input: pb.stmp.examples.room.ListInput, output: pb.stmp.examples.room.ListRoomOutput): void | Promise<void>
      
      JoinRoom(ctx: Context, input: pb.stmp.examples.room.JoinRoomInput, output: pb.stmp.examples.room.RoomModel): void | Promise<void>
      
      ExitRoom(ctx: Context, input: pb.stmp.examples.room.ExitRoomInput, output: pb.google.protobuf.Empty): void | Promise<void>
      
      SendMessage(ctx: Context, input: pb.stmp.examples.room.SendMessageInput, output: pb.google.protobuf.Empty): void | Promise<void>
      
    }

    class RoomServiceClient {
      private client: Client;
      constructor(client: Client)
      
      CreateRoom(data: pb.stmp.examples.room.ICreateRoomInput, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.RoomModel>
      
      ListRoom(data: pb.stmp.examples.room.IListInput, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.ListRoomOutput>
      
      JoinRoom(data: pb.stmp.examples.room.IJoinRoomInput, options?: Partial<CallOptions>): Promise<pb.stmp.examples.room.RoomModel>
      
      ExitRoom(data: pb.stmp.examples.room.IExitRoomInput, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
      
      SendMessage(data: pb.stmp.examples.room.ISendMessageInput, options?: Partial<CallOptions>): Promise<pb.google.protobuf.Empty>
      
    }
    
    
    
    
    
    class RoomEventsListener {
      static register(c: Client, inst: RoomEventsListener): void
      static unregister(c: Client, inst: RoomEventsListener): void
      
      HandleUserEnter(ctx: Context, input: pb.stmp.examples.room.UserEnterEvent, output: pb.google.protobuf.Empty): void
      
      HandleUserExit(ctx: Context, input: pb.stmp.examples.room.UserExitEvent, output: pb.google.protobuf.Empty): void
      
      HandleNewMessage(ctx: Context, input: pb.stmp.examples.room.ChatMessageModel, output: pb.google.protobuf.Empty): void
      
    }

    class RoomEventsBroadcaster {
      
      static UserEnter(input: pb.stmp.examples.room.IUserEnterEvent, conn: Connection): void
      static UserEnterToSet(input: pb.stmp.examples.room.IUserEnterEvent, conns: Set<Connection>, excludes?: Connection[]): void
      static UserEnterToAll(input: pb.stmp.examples.room.IUserEnterEvent, srv: Server, filter?: ConnFilter): void
      
      static UserExit(input: pb.stmp.examples.room.IUserExitEvent, conn: Connection): void
      static UserExitToSet(input: pb.stmp.examples.room.IUserExitEvent, conns: Set<Connection>, excludes?: Connection[]): void
      static UserExitToAll(input: pb.stmp.examples.room.IUserExitEvent, srv: Server, filter?: ConnFilter): void
      
      static NewMessage(input: pb.stmp.examples.room.IChatMessageModel, conn: Connection): void
      static NewMessageToSet(input: pb.stmp.examples.room.IChatMessageModel, conns: Set<Connection>, excludes?: Connection[]): void
      static NewMessageToAll(input: pb.stmp.examples.room.IChatMessageModel, srv: Server, filter?: ConnFilter): void
      
      constructor()
    }
    
    
  }
  
}
