// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: examples/gomoku/gomoku_pb/gomoku.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _gomoku_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Empty) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on PlayerModel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PlayerModel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for RoomId

	// no validation rules for Seat

	// no validation rules for GameId

	// no validation rules for ReadyTimeout

	return nil
}

// PlayerModelValidationError is the validation error returned by
// PlayerModel.Validate if the designated constraints aren't met.
type PlayerModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerModelValidationError) ErrorName() string { return "PlayerModelValidationError" }

// Error satisfies the builtin error interface
func (e PlayerModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerModelValidationError{}

// Validate checks the field values on RoomModel with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RoomModel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Players

	// no validation rules for GameId

	return nil
}

// RoomModelValidationError is the validation error returned by
// RoomModel.Validate if the designated constraints aren't met.
type RoomModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomModelValidationError) ErrorName() string { return "RoomModelValidationError" }

// Error satisfies the builtin error interface
func (e RoomModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomModelValidationError{}

// Validate checks the field values on HandModel with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *HandModel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for T

	return nil
}

// HandModelValidationError is the validation error returned by
// HandModel.Validate if the designated constraints aren't met.
type HandModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandModelValidationError) ErrorName() string { return "HandModelValidationError" }

// Error satisfies the builtin error interface
func (e HandModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandModelValidationError{}

// Validate checks the field values on ApplyModel with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ApplyModel) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ApplyModelValidationError is the validation error returned by
// ApplyModel.Validate if the designated constraints aren't met.
type ApplyModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyModelValidationError) ErrorName() string { return "ApplyModelValidationError" }

// Error satisfies the builtin error interface
func (e ApplyModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyModelValidationError{}

// Validate checks the field values on GomokuModel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GomokuModel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for RoomId

	// no validation rules for PlayerBlack

	// no validation rules for PlayerWhite

	// no validation rules for SeatBlack

	// no validation rules for SeatWhite

	for idx, item := range m.GetHistory() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GomokuModelValidationError{
						field:  fmt.Sprintf("History[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	// no validation rules for CreatedAt

	// no validation rules for Result

	// no validation rules for Winner

	return nil
}

// GomokuModelValidationError is the validation error returned by
// GomokuModel.Validate if the designated constraints aren't met.
type GomokuModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GomokuModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GomokuModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GomokuModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GomokuModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GomokuModelValidationError) ErrorName() string { return "GomokuModelValidationError" }

// Error satisfies the builtin error interface
func (e GomokuModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGomokuModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GomokuModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GomokuModelValidationError{}

// Validate checks the field values on FullRoomModel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FullRoomModel) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetRoom()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return FullRoomModelValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	for key, val := range m.GetPlayers() {
		_ = val

		// no validation rules for Players[key]

		{
			tmp := val

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return FullRoomModelValidationError{
						field:  fmt.Sprintf("Players[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetGame()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return FullRoomModelValidationError{
					field:  "Game",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// FullRoomModelValidationError is the validation error returned by
// FullRoomModel.Validate if the designated constraints aren't met.
type FullRoomModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FullRoomModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FullRoomModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FullRoomModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FullRoomModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FullRoomModelValidationError) ErrorName() string { return "FullRoomModelValidationError" }

// Error satisfies the builtin error interface
func (e FullRoomModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFullRoomModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FullRoomModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FullRoomModelValidationError{}

// Validate checks the field values on ListInput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListInputValidationError is the validation error returned by
// ListInput.Validate if the designated constraints aren't met.
type ListInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInputValidationError) ErrorName() string { return "ListInputValidationError" }

// Error satisfies the builtin error interface
func (e ListInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInputValidationError{}

// Validate checks the field values on ListRoomOutput with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListRoomOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListRoomOutputValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListRoomOutputValidationError is the validation error returned by
// ListRoomOutput.Validate if the designated constraints aren't met.
type ListRoomOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoomOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoomOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoomOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoomOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoomOutputValidationError) ErrorName() string { return "ListRoomOutputValidationError" }

// Error satisfies the builtin error interface
func (e ListRoomOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoomOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoomOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoomOutputValidationError{}

// Validate checks the field values on LookonRoomInput with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LookonRoomInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RoomId

	return nil
}

// LookonRoomInputValidationError is the validation error returned by
// LookonRoomInput.Validate if the designated constraints aren't met.
type LookonRoomInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookonRoomInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookonRoomInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookonRoomInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookonRoomInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookonRoomInputValidationError) ErrorName() string { return "LookonRoomInputValidationError" }

// Error satisfies the builtin error interface
func (e LookonRoomInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookonRoomInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookonRoomInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookonRoomInputValidationError{}

// Validate checks the field values on JoinRoomInput with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JoinRoomInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RoomId

	// no validation rules for PreferSeat

	// no validation rules for Seat

	return nil
}

// JoinRoomInputValidationError is the validation error returned by
// JoinRoomInput.Validate if the designated constraints aren't met.
type JoinRoomInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRoomInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRoomInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRoomInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRoomInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRoomInputValidationError) ErrorName() string { return "JoinRoomInputValidationError" }

// Error satisfies the builtin error interface
func (e JoinRoomInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRoomInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRoomInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRoomInputValidationError{}

// Validate checks the field values on UserJoinEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserJoinEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Seat

	// no validation rules for ReadyTimeout

	return nil
}

// UserJoinEventValidationError is the validation error returned by
// UserJoinEvent.Validate if the designated constraints aren't met.
type UserJoinEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserJoinEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserJoinEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserJoinEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserJoinEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserJoinEventValidationError) ErrorName() string { return "UserJoinEventValidationError" }

// Error satisfies the builtin error interface
func (e UserJoinEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserJoinEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserJoinEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserJoinEventValidationError{}

// Validate checks the field values on UserReadyEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserReadyEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// UserReadyEventValidationError is the validation error returned by
// UserReadyEvent.Validate if the designated constraints aren't met.
type UserReadyEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserReadyEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserReadyEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserReadyEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserReadyEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserReadyEventValidationError) ErrorName() string { return "UserReadyEventValidationError" }

// Error satisfies the builtin error interface
func (e UserReadyEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserReadyEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserReadyEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserReadyEventValidationError{}

// Validate checks the field values on UserUnreadyEvent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserUnreadyEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ReadyTimeout

	return nil
}

// UserUnreadyEventValidationError is the validation error returned by
// UserUnreadyEvent.Validate if the designated constraints aren't met.
type UserUnreadyEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUnreadyEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUnreadyEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUnreadyEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUnreadyEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUnreadyEventValidationError) ErrorName() string { return "UserUnreadyEventValidationError" }

// Error satisfies the builtin error interface
func (e UserUnreadyEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUnreadyEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUnreadyEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUnreadyEventValidationError{}

// Validate checks the field values on UserLookonEvent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserLookonEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// UserLookonEventValidationError is the validation error returned by
// UserLookonEvent.Validate if the designated constraints aren't met.
type UserLookonEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLookonEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLookonEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLookonEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLookonEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLookonEventValidationError) ErrorName() string { return "UserLookonEventValidationError" }

// Error satisfies the builtin error interface
func (e UserLookonEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLookonEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLookonEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLookonEventValidationError{}

// Validate checks the field values on UserExitEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserExitEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// UserExitEventValidationError is the validation error returned by
// UserExitEvent.Validate if the designated constraints aren't met.
type UserExitEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserExitEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserExitEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserExitEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserExitEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserExitEventValidationError) ErrorName() string { return "UserExitEventValidationError" }

// Error satisfies the builtin error interface
func (e UserExitEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserExitEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserExitEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserExitEventValidationError{}

// Validate checks the field values on ApplyInput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ApplyInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kind

	return nil
}

// ApplyInputValidationError is the validation error returned by
// ApplyInput.Validate if the designated constraints aren't met.
type ApplyInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyInputValidationError) ErrorName() string { return "ApplyInputValidationError" }

// Error satisfies the builtin error interface
func (e ApplyInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyInputValidationError{}

// Validate checks the field values on ReplyInput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ReplyInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kind

	// no validation rules for Accept

	return nil
}

// ReplyInputValidationError is the validation error returned by
// ReplyInput.Validate if the designated constraints aren't met.
type ReplyInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyInputValidationError) ErrorName() string { return "ReplyInputValidationError" }

// Error satisfies the builtin error interface
func (e ReplyInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyInputValidationError{}

// Validate checks the field values on UserPlayEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserPlayEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	{
		tmp := m.GetHand()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return UserPlayEventValidationError{
					field:  "Hand",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// UserPlayEventValidationError is the validation error returned by
// UserPlayEvent.Validate if the designated constraints aren't met.
type UserPlayEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPlayEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPlayEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPlayEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPlayEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPlayEventValidationError) ErrorName() string { return "UserPlayEventValidationError" }

// Error satisfies the builtin error interface
func (e UserPlayEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPlayEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPlayEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPlayEventValidationError{}

// Validate checks the field values on UserApplyEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserApplyEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kind

	return nil
}

// UserApplyEventValidationError is the validation error returned by
// UserApplyEvent.Validate if the designated constraints aren't met.
type UserApplyEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserApplyEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserApplyEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserApplyEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserApplyEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserApplyEventValidationError) ErrorName() string { return "UserApplyEventValidationError" }

// Error satisfies the builtin error interface
func (e UserApplyEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserApplyEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserApplyEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserApplyEventValidationError{}

// Validate checks the field values on UserReplyEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserReplyEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kind

	// no validation rules for Accepted

	return nil
}

// UserReplyEventValidationError is the validation error returned by
// UserReplyEvent.Validate if the designated constraints aren't met.
type UserReplyEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserReplyEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserReplyEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserReplyEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserReplyEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserReplyEventValidationError) ErrorName() string { return "UserReplyEventValidationError" }

// Error satisfies the builtin error interface
func (e UserReplyEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserReplyEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserReplyEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserReplyEventValidationError{}

// Validate checks the field values on UserDisconnectedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserDisconnectedEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for WaitTimeout

	return nil
}

// UserDisconnectedEventValidationError is the validation error returned by
// UserDisconnectedEvent.Validate if the designated constraints aren't met.
type UserDisconnectedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDisconnectedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDisconnectedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDisconnectedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDisconnectedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDisconnectedEventValidationError) ErrorName() string {
	return "UserDisconnectedEventValidationError"
}

// Error satisfies the builtin error interface
func (e UserDisconnectedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDisconnectedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDisconnectedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDisconnectedEventValidationError{}

// Validate checks the field values on UserConnectedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserConnectedEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// UserConnectedEventValidationError is the validation error returned by
// UserConnectedEvent.Validate if the designated constraints aren't met.
type UserConnectedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserConnectedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserConnectedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserConnectedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserConnectedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserConnectedEventValidationError) ErrorName() string {
	return "UserConnectedEventValidationError"
}

// Error satisfies the builtin error interface
func (e UserConnectedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserConnectedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserConnectedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserConnectedEventValidationError{}

// Validate checks the field values on LoginInput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// LoginInputValidationError is the validation error returned by
// LoginInput.Validate if the designated constraints aren't met.
type LoginInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginInputValidationError) ErrorName() string { return "LoginInputValidationError" }

// Error satisfies the builtin error interface
func (e LoginInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginInputValidationError{}

// Validate checks the field values on ListPlayerInput with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListPlayerInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListPlayerInputValidationError is the validation error returned by
// ListPlayerInput.Validate if the designated constraints aren't met.
type ListPlayerInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlayerInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlayerInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlayerInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlayerInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlayerInputValidationError) ErrorName() string { return "ListPlayerInputValidationError" }

// Error satisfies the builtin error interface
func (e ListPlayerInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlayerInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlayerInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlayerInputValidationError{}

// Validate checks the field values on ListPlayerOutput with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListPlayerOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetPlayers() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListPlayerOutputValidationError{
						field:  fmt.Sprintf("Players[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListPlayerOutputValidationError is the validation error returned by
// ListPlayerOutput.Validate if the designated constraints aren't met.
type ListPlayerOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlayerOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlayerOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlayerOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlayerOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlayerOutputValidationError) ErrorName() string { return "ListPlayerOutputValidationError" }

// Error satisfies the builtin error interface
func (e ListPlayerOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlayerOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlayerOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlayerOutputValidationError{}
