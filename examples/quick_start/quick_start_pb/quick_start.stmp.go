// Code generated by protoc-gen-stmp. DO NOT EDIT.
// source: examples/quick_start/quick_start_pb/quick_start.proto
package pb

import (
	"context"
	"github.com/acrazing/stmp-go/stmp"
	empty "github.com/golang/protobuf/ptypes/empty"
)


func init() {
	stmp.RegisterMethodAction("stmp.examples.quick_start.RoomService.Join", 0x8DA9FCC1, func() interface{} { return &JoinInput{} }, func() interface{} { return &RoomModel{} })
	stmp.RegisterMethodAction("stmp.examples.quick_start.RoomService.Exit", 0xD0147E06, func() interface{} { return &ExitInput{} }, func() interface{} { return &empty.Empty{} })
}

type STMPRoomServiceServer interface {
	Join(ctx context.Context, in *JoinInput) (out *RoomModel, err error)
	Exit(ctx context.Context, in *ExitInput) (out *empty.Empty, err error)
}

func STMPRegisterRoomServiceServer(srv *stmp.Server, s STMPRoomServiceServer) {
	srv.Register(s, "stmp.examples.quick_start.RoomService.Join", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomServiceServer).Join(ctx, in.(*JoinInput)) })
	srv.Register(s, "stmp.examples.quick_start.RoomService.Exit", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomServiceServer).Exit(ctx, in.(*ExitInput)) })
}

func STMPUnregisterRoomServiceServer(srv *stmp.Server, s STMPRoomServiceServer) {
	srv.Unregister(s, "stmp.examples.quick_start.RoomService.Join")
	srv.Unregister(s, "stmp.examples.quick_start.RoomService.Exit")
}

type STMPRoomServiceListener interface {
	HandleJoinOfRoomService(ctx context.Context, in *JoinInput) (out *RoomModel, err error)
	HandleExitOfRoomService(ctx context.Context, in *ExitInput) (out *empty.Empty, err error)
}

func STMPRegisterRoomServiceListener(cc *stmp.ClientConn, s STMPRoomServiceListener) {
	cc.Register(s, "stmp.examples.quick_start.RoomService.Join", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomServiceServer).HandleJoinOfRoomService(ctx, in.(*JoinInput)) })
	cc.Register(s, "stmp.examples.quick_start.RoomService.Exit", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomServiceServer).HandleExitOfRoomService(ctx, in.(*ExitInput)) })
}

func STMPUnregisterRoomServiceListener(cc *stmp.ClientConn, s STMPRoomServiceListener) {
	cc.Unregister(s, "stmp.examples.quick_start.RoomService.Join")
	cc.Unregister(s, "stmp.examples.quick_start.RoomService.Exit")
}

type STMPRoomServiceBroadcaster struct{}

func (s STMPRoomServiceBroadcaster) Join(ctx context.Context, in *JoinInput, conn *stmp.Conn, opts ...stmp.CallOption) (*RoomModel, error) {
	out, err := conn.Invoke(ctx, "stmp.examples.quick_start.RoomService.Join", in, stmp.NewCallOptions(opts...))
	return out.(*RoomModel), err
}

func (s STMPRoomServiceBroadcaster) JoinToList(ctx context.Context, in *JoinInput, conns ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for _, conn := range conns {
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomService.Join", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomServiceBroadcaster) JoinToSet(ctx context.Context, in *JoinInput, conns stmp.ConnSet, exclude ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for conn := range conns {
		for _, e := range exclude {
			if e == conn {
				conn = nil
				break
			}
		}
		if conn == nil {
			continue
		}
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomService.Join", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomServiceBroadcaster) JoinToAll(ctx context.Context, in *JoinInput, srv *stmp.Server, filter stmp.ConnFilter) error {
	return srv.Broadcast(ctx, "stmp.examples.quick_start.RoomService.Join", in, filter)
}

func (s STMPRoomServiceBroadcaster) Exit(ctx context.Context, in *ExitInput, conn *stmp.Conn, opts ...stmp.CallOption) (*empty.Empty, error) {
	out, err := conn.Invoke(ctx, "stmp.examples.quick_start.RoomService.Exit", in, stmp.NewCallOptions(opts...))
	return out.(*empty.Empty), err
}

func (s STMPRoomServiceBroadcaster) ExitToList(ctx context.Context, in *ExitInput, conns ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for _, conn := range conns {
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomService.Exit", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomServiceBroadcaster) ExitToSet(ctx context.Context, in *ExitInput, conns stmp.ConnSet, exclude ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for conn := range conns {
		for _, e := range exclude {
			if e == conn {
				conn = nil
				break
			}
		}
		if conn == nil {
			continue
		}
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomService.Exit", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomServiceBroadcaster) ExitToAll(ctx context.Context, in *ExitInput, srv *stmp.Server, filter stmp.ConnFilter) error {
	return srv.Broadcast(ctx, "stmp.examples.quick_start.RoomService.Exit", in, filter)
}

type STMPRoomServiceClient interface {
	Join(ctx context.Context, in *JoinInput, opts ...stmp.CallOption) (*RoomModel, error)
	Exit(ctx context.Context, in *ExitInput, opts ...stmp.CallOption) (*empty.Empty, error)
}

type stmpRoomServiceClient struct {
	c *stmp.ClientConn
}

func (s *stmpRoomServiceClient) Join(ctx context.Context, in *JoinInput, opts ...stmp.CallOption) (*RoomModel, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.quick_start.RoomService.Join", in, stmp.NewCallOptions(opts...))
	return out.(*RoomModel), err
}

func (s *stmpRoomServiceClient) Exit(ctx context.Context, in *ExitInput, opts ...stmp.CallOption) (*empty.Empty, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.quick_start.RoomService.Exit", in, stmp.NewCallOptions(opts...))
	return out.(*empty.Empty), err
}

func STMPNewRoomServiceClient(c *stmp.ClientConn) STMPRoomServiceClient {
	return &stmpRoomServiceClient{c: c}
}

func init() {
	stmp.RegisterMethodAction("stmp.examples.quick_start.RoomEvents.Join", 0x97B4EDC1, func() interface{} { return &JoinEvent{} }, func() interface{} { return &empty.Empty{} })
	stmp.RegisterMethodAction("stmp.examples.quick_start.RoomEvents.Exit", 0xF74627DF, func() interface{} { return &ExitEvent{} }, func() interface{} { return &empty.Empty{} })
}

type STMPRoomEventsServer interface {
	Join(ctx context.Context, in *JoinEvent) (out *empty.Empty, err error)
	Exit(ctx context.Context, in *ExitEvent) (out *empty.Empty, err error)
}

func STMPRegisterRoomEventsServer(srv *stmp.Server, s STMPRoomEventsServer) {
	srv.Register(s, "stmp.examples.quick_start.RoomEvents.Join", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomEventsServer).Join(ctx, in.(*JoinEvent)) })
	srv.Register(s, "stmp.examples.quick_start.RoomEvents.Exit", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomEventsServer).Exit(ctx, in.(*ExitEvent)) })
}

func STMPUnregisterRoomEventsServer(srv *stmp.Server, s STMPRoomEventsServer) {
	srv.Unregister(s, "stmp.examples.quick_start.RoomEvents.Join")
	srv.Unregister(s, "stmp.examples.quick_start.RoomEvents.Exit")
}

type STMPRoomEventsListener interface {
	HandleJoinOfRoomEvents(ctx context.Context, in *JoinEvent) (out *empty.Empty, err error)
	HandleExitOfRoomEvents(ctx context.Context, in *ExitEvent) (out *empty.Empty, err error)
}

func STMPRegisterRoomEventsListener(cc *stmp.ClientConn, s STMPRoomEventsListener) {
	cc.Register(s, "stmp.examples.quick_start.RoomEvents.Join", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomEventsServer).HandleJoinOfRoomEvents(ctx, in.(*JoinEvent)) })
	cc.Register(s, "stmp.examples.quick_start.RoomEvents.Exit", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomEventsServer).HandleExitOfRoomEvents(ctx, in.(*ExitEvent)) })
}

func STMPUnregisterRoomEventsListener(cc *stmp.ClientConn, s STMPRoomEventsListener) {
	cc.Unregister(s, "stmp.examples.quick_start.RoomEvents.Join")
	cc.Unregister(s, "stmp.examples.quick_start.RoomEvents.Exit")
}

type STMPRoomEventsBroadcaster struct{}

func (s STMPRoomEventsBroadcaster) Join(ctx context.Context, in *JoinEvent, conn *stmp.Conn, opts ...stmp.CallOption) (*empty.Empty, error) {
	out, err := conn.Invoke(ctx, "stmp.examples.quick_start.RoomEvents.Join", in, stmp.NewCallOptions(opts...))
	return out.(*empty.Empty), err
}

func (s STMPRoomEventsBroadcaster) JoinToList(ctx context.Context, in *JoinEvent, conns ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for _, conn := range conns {
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomEvents.Join", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) JoinToSet(ctx context.Context, in *JoinEvent, conns stmp.ConnSet, exclude ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for conn := range conns {
		for _, e := range exclude {
			if e == conn {
				conn = nil
				break
			}
		}
		if conn == nil {
			continue
		}
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomEvents.Join", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) JoinToAll(ctx context.Context, in *JoinEvent, srv *stmp.Server, filter stmp.ConnFilter) error {
	return srv.Broadcast(ctx, "stmp.examples.quick_start.RoomEvents.Join", in, filter)
}

func (s STMPRoomEventsBroadcaster) Exit(ctx context.Context, in *ExitEvent, conn *stmp.Conn, opts ...stmp.CallOption) (*empty.Empty, error) {
	out, err := conn.Invoke(ctx, "stmp.examples.quick_start.RoomEvents.Exit", in, stmp.NewCallOptions(opts...))
	return out.(*empty.Empty), err
}

func (s STMPRoomEventsBroadcaster) ExitToList(ctx context.Context, in *ExitEvent, conns ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for _, conn := range conns {
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomEvents.Exit", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) ExitToSet(ctx context.Context, in *ExitEvent, conns stmp.ConnSet, exclude ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for conn := range conns {
		for _, e := range exclude {
			if e == conn {
				conn = nil
				break
			}
		}
		if conn == nil {
			continue
		}
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomEvents.Exit", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) ExitToAll(ctx context.Context, in *ExitEvent, srv *stmp.Server, filter stmp.ConnFilter) error {
	return srv.Broadcast(ctx, "stmp.examples.quick_start.RoomEvents.Exit", in, filter)
}

type STMPRoomEventsClient interface {
	Join(ctx context.Context, in *JoinEvent, opts ...stmp.CallOption) (*empty.Empty, error)
	Exit(ctx context.Context, in *ExitEvent, opts ...stmp.CallOption) (*empty.Empty, error)
}

type stmpRoomEventsClient struct {
	c *stmp.ClientConn
}

func (s *stmpRoomEventsClient) Join(ctx context.Context, in *JoinEvent, opts ...stmp.CallOption) (*empty.Empty, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.quick_start.RoomEvents.Join", in, stmp.NewCallOptions(opts...))
	return out.(*empty.Empty), err
}

func (s *stmpRoomEventsClient) Exit(ctx context.Context, in *ExitEvent, opts ...stmp.CallOption) (*empty.Empty, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.quick_start.RoomEvents.Exit", in, stmp.NewCallOptions(opts...))
	return out.(*empty.Empty), err
}

func STMPNewRoomEventsClient(c *stmp.ClientConn) STMPRoomEventsClient {
	return &stmpRoomEventsClient{c: c}
}
