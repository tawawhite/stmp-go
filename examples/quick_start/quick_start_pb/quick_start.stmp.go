// Code generated by protoc-gen-stmp. DO NOT EDIT.
// source: examples/quick_start/quick_start_pb/quick_start.proto
package pb

import (
	"context"
	"github.com/acrazing/stmp-go/stmp"
	empty "github.com/golang/protobuf/ptypes/empty"
)


func init() {
	stmp.RegisterMethodAction("stmp.examples.quick_start.RoomService.JoinRoom", 0x833648F7, func() interface{} { return &JoinRoomInput{} }, func() interface{} { return &RoomModel{} })
	stmp.RegisterMethodAction("stmp.examples.quick_start.RoomService.ExitRoom", 0xA7FFD932, func() interface{} { return &ExitRoomInput{} }, func() interface{} { return &empty.Empty{} })
}

type STMPRoomServiceServer interface {
	JoinRoom(ctx context.Context, in *JoinRoomInput) (out *RoomModel, err error)
	ExitRoom(ctx context.Context, in *ExitRoomInput) (out *empty.Empty, err error)
}

func STMPRegisterRoomServiceServer(srv *stmp.Server, s STMPRoomServiceServer) {
	srv.Register(s, "stmp.examples.quick_start.RoomService.JoinRoom", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomServiceServer).JoinRoom(ctx, in.(*JoinRoomInput)) })
	srv.Register(s, "stmp.examples.quick_start.RoomService.ExitRoom", func(ctx context.Context, in interface{}, inst interface{}) (out interface{}, err error) { return inst.(STMPRoomServiceServer).ExitRoom(ctx, in.(*ExitRoomInput)) })
}

func STMPUnregisterRoomServiceServer(srv *stmp.Server, s STMPRoomServiceServer) {
	srv.Unregister(s, "stmp.examples.quick_start.RoomService.JoinRoom")
	srv.Unregister(s, "stmp.examples.quick_start.RoomService.ExitRoom")
}

type STMPRoomServiceClient interface {
	JoinRoom(ctx context.Context, in *JoinRoomInput, opts ...*stmp.CallOptions) (*RoomModel, error)
	ExitRoom(ctx context.Context, in *ExitRoomInput, opts ...*stmp.CallOptions) (*empty.Empty, error)
}

type stmpRoomServiceClient struct {
	c *stmp.ClientConn
}

func (s *stmpRoomServiceClient) JoinRoom(ctx context.Context, in *JoinRoomInput, opts ...*stmp.CallOptions) (*RoomModel, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.quick_start.RoomService.JoinRoom", in, stmp.PickCallOptions(opts...))
	if out == nil { return (*RoomModel)(nil), err } else { return out.(*RoomModel), err }
}

func (s *stmpRoomServiceClient) ExitRoom(ctx context.Context, in *ExitRoomInput, opts ...*stmp.CallOptions) (*empty.Empty, error) {
	out, err := s.c.Invoke(ctx, "stmp.examples.quick_start.RoomService.ExitRoom", in, stmp.PickCallOptions(opts...))
	if out == nil { return (*empty.Empty)(nil), err } else { return out.(*empty.Empty), err }
}

func STMPNewRoomServiceClient(c *stmp.ClientConn) STMPRoomServiceClient {
	return &stmpRoomServiceClient{c: c}
}


func init() {
	stmp.RegisterMethodAction("stmp.examples.quick_start.RoomEvents.UserJoin", 0x999B2807, func() interface{} { return &UserJoinEvent{} }, func() interface{} { return &empty.Empty{} })
	stmp.RegisterMethodAction("stmp.examples.quick_start.RoomEvents.UserExit", 0x827247A2, func() interface{} { return &UserExitEvent{} }, func() interface{} { return &empty.Empty{} })
}


type STMPRoomEventsListener interface {
	HandleUserJoin(ctx context.Context, in *UserJoinEvent)
	HandleUserExit(ctx context.Context, in *UserExitEvent)
}

func STMPRegisterRoomEventsListener(cc *stmp.ClientConn, s STMPRoomEventsListener) {
	cc.Register(s, "stmp.examples.quick_start.RoomEvents.UserJoin", func(ctx context.Context, in interface{}, inst interface{}) (interface{}, error) {
		inst.(STMPRoomEventsListener).HandleUserJoin(ctx, in.(*UserJoinEvent))
		return nil, nil
	})
	cc.Register(s, "stmp.examples.quick_start.RoomEvents.UserExit", func(ctx context.Context, in interface{}, inst interface{}) (interface{}, error) {
		inst.(STMPRoomEventsListener).HandleUserExit(ctx, in.(*UserExitEvent))
		return nil, nil
	})
}

func STMPUnregisterRoomEventsListener(cc *stmp.ClientConn, s STMPRoomEventsListener) {
	cc.Unregister(s, "stmp.examples.quick_start.RoomEvents.UserJoin")
	cc.Unregister(s, "stmp.examples.quick_start.RoomEvents.UserExit")
}

type STMPRoomEventsBroadcaster struct{}

func (s STMPRoomEventsBroadcaster) UserJoin(ctx context.Context, in *UserJoinEvent, conn *stmp.Conn, opts ...*stmp.CallOptions) error {
	_, err := conn.Invoke(ctx, "stmp.examples.quick_start.RoomEvents.UserJoin", in, stmp.PickCallOptions(opts...).Notify())
	return err
}

func (s STMPRoomEventsBroadcaster) UserJoinToList(ctx context.Context, in *UserJoinEvent, conns ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for _, conn := range conns {
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomEvents.UserJoin", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) UserJoinToSet(ctx context.Context, in *UserJoinEvent, conns stmp.ConnSet, exclude ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for conn := range conns {
		for _, e := range exclude {
			if e == conn {
				conn = nil
				break
			}
		}
		if conn == nil {
			continue
		}
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomEvents.UserJoin", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) UserJoinToAll(ctx context.Context, in *UserJoinEvent, srv *stmp.Server, filter ...stmp.ConnFilter) error {
	return srv.Broadcast(ctx, "stmp.examples.quick_start.RoomEvents.UserJoin", in, filter...)
}
func (s STMPRoomEventsBroadcaster) UserExit(ctx context.Context, in *UserExitEvent, conn *stmp.Conn, opts ...*stmp.CallOptions) error {
	_, err := conn.Invoke(ctx, "stmp.examples.quick_start.RoomEvents.UserExit", in, stmp.PickCallOptions(opts...).Notify())
	return err
}

func (s STMPRoomEventsBroadcaster) UserExitToList(ctx context.Context, in *UserExitEvent, conns ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for _, conn := range conns {
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomEvents.UserExit", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) UserExitToSet(ctx context.Context, in *UserExitEvent, conns stmp.ConnSet, exclude ...*stmp.Conn) error {
	payloads := stmp.NewPayloadMap(in)
	for conn := range conns {
		for _, e := range exclude {
			if e == conn {
				conn = nil
				break
			}
		}
		if conn == nil {
			continue
		}
		payload, err := payloads.Marshal(conn)
		if err != nil {
			return err
		}
		_, err = conn.Call(ctx, "stmp.examples.quick_start.RoomEvents.UserExit", payload, stmp.NotifyOptions)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s STMPRoomEventsBroadcaster) UserExitToAll(ctx context.Context, in *UserExitEvent, srv *stmp.Server, filter ...stmp.ConnFilter) error {
	return srv.Broadcast(ctx, "stmp.examples.quick_start.RoomEvents.UserExit", in, filter...)
}
